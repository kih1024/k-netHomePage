<?xml version="1.0"?>
<project name="DaumEditor" basedir="." default="buildall">
    <property file="build.properties"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${build.lib.antcontrib}" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpath="${build.lib.antcontrib}"/>
	<!-- <taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" classpath="${build.lib.gcuploader}" name="gcupload"/> -->
    <!-- main tasks ====================================================== -->
    <target name="buildall" description="clean and build all" depends="clean, packaging">
	</target>
    <target name="clean" description="remove all artifacts">
        <delete dir="${build.target.dir}"/>
        <delete dir="${build.dist.dir}"/>
    </target>
    <target name="packaging" description="packaging distribution files" depends="build">
        <echo message="copy javascript"/>
        <copy todir="${build.dist.dir}/js" overwrite="true">
            <fileset dir="${build.target.js.minified.dir}"/>
        </copy>
        <echo message="copy css"/>
        <copy todir="${build.dist.dir}/css" overwrite="true">
            <fileset dir="${build.target.css.minified.dir}"/>
    	</copy>
        <echo message="copy image and html files"/>
        <copy todir="${build.dist.dir}" overwrite="true">
            <fileset dir="${src.editor.dir}">
                <include name="**/images/" />
                <include name="**/pages/" />
                <include name="editor.html"/>
            </fileset>
        </copy>
        <echo message="make a archive file(daumeditor.zip)"/>
        <zip destfile="${build.dist.dir}/daumeditor.zip">
            <fileset dir="${build.dist.dir}">
                <exclude name="*.zip"/>
            </fileset>
        </zip>
    </target>
    <target name="build" description="build artifacts" depends="build-css,build-js"/>
    <target name="deploy" depends="get_version,packaging" description="upload the artifact on googlecode hosting">
        <trycatch>
            <try>
                <property file="${user.home}/daumeditor.credentials.properties"/>
                <!-- <gcupload username="${gc.username}" password="${gc.password}" projectname="daumopeneditor" filename="${build.dist.dir}/daumeditor.zip" targetfilename="daumeditor-${editor.version}.zip" summary="${editor.version} release zip file" verbose="true"/> -->
            </try>
            <catch>
                <echo> Write your google account in ${user.home}/daumeditor.credentials.properties  </echo>
                <echo> in daumeditor.credentials.properties </echo>
                <echo> gc.username=[your google account Id]  </echo>
                <echo> gc.password=[your google account password]  </echo>
            </catch>
        </trycatch>
    </target>
    <!-- build javascript tasks ========================================== -->
    <target name="build-js" depends="prepare_build_js">
        <!-- TODO escape > merge > minify 순이어야 효율적이다. -->
        <ant target="merge_javascripts"/>
        <ant target="escape_and_delete_logging"/>
        <ant target="minify_javascripts"/>
    </target>
    <target name="prepare_build_js">
        <mkdir dir="${build.target.js.merged.dir}"/>
        <mkdir dir="${build.target.js.escaped.dir}"/>
        <mkdir dir="${build.target.js.minified.dir}"/>
    </target>
    <target name="merge_javascripts" depends="get_version">
        <for list="${js.list}" param="module">
            <sequential>
                <echo message="Merge @{module}.js ..."/>
                <java jar="${build.lib.rhino}" failonerror="true" fork="true">
                    <arg value="${build.script.dir}/merge_javascript.js"/>
                    <arg value="${build.target.js.merged.dir}/@{module}.js"/>
                    <arg value="${src.editor.js.dir}"/>
                    <arg value="@{module}.js"/>
                    <arg value="${editor.version}"/>
                </java>
            </sequential>
        </for>
        <antcall target="copy_etc_js_to_dist"/>
    </target>
    <target name="copy_etc_js_to_dist">
        <copy todir="${build.target.js.merged.dir}" overwrite="true">
            <fileset dir="${src.editor.js.dir}">
                <include name="editor_loader.js"/>
                <include name="editor_creator.js"/>
                <include name="**/async/"/>
            </fileset>
        </copy>
    </target>
    <target name="escape_and_delete_logging">
        <native2ascii encoding="utf-8" src="${build.target.js.merged.dir}" dest="${build.target.js.escaped.dir}" includes="**/*.js"/>
        <replaceregexp match="(console\.\w{3,6}\([^)]*\);?)" replace="" flags="g" byline="true" encoding="utf-8">
            <fileset dir="${build.target.js.escaped.dir}" includes="**/*.js"/>
        </replaceregexp>
        <replaceregexp match="(debugger;)" replace="" flags="g" byline="true" encoding="utf-8">
            <fileset dir="${build.target.js.escaped.dir}" includes="**/*.js"/>
        </replaceregexp>
    </target>
    <target name="minify_javascripts">
    	<copy todir="${build.target.js.minified.dir}">
    		<fileset dir="${build.target.js.escaped.dir}" />
    	</copy>
        <for param="file">
            <path>
                <fileset dir="${build.target.js.minified.dir}" includes="**/*.js"/>
            </path>
            <sequential>
            	<echo message="Minify @{file}"/>
                <java classname="com.yahoo.platform.yui.compressor.YUICompressor" classpath="${build.lib.yuicompressor}" failonerror="true">
                    <arg value="--charset"/>
                    <arg value="utf-8"/>
                    <arg value="--line-break"/>
                    <arg value="1000"/>
                    <arg file="@{file}"/>
                    <arg value="-o"/>
                    <arg file="@{file}"/>
                </java>
            </sequential>
        </for>
    </target>
    <!-- build css tasks ================================================= -->
    <target name="build-css" depends="prepare_build_css">
        <ant target="merge_css"/>
        <ant target="minify_css"/>
    </target>
    <target name="prepare_build_css">
        <mkdir dir="${build.target.css.merged.dir}"/>
    	<mkdir dir="${build.target.css.minified.dir}"/>
    </target>
    <target name="merge_css">
        <for list="${css.list}" param="module">
            <sequential>
                <echo message="Merge @{module}.css ..."/>
                <java jar="${build.lib.rhino}" failonerror="true" fork="true">
                    <arg value="${build.script.dir}/merge_css.js"/>
                    <arg value="${build.target.css.merged.dir}/@{module}.css"/>
                    <arg value="${src.editor.css.dir}"/>
                    <arg value="@{module}.css"/>
                    <arg value="${build.link.image.url}"/>
                </java>
            </sequential>
        </for>
    </target>
    <target name="minify_css">
    	<copy todir="${build.target.css.minified.dir}">
    		<fileset dir="${build.target.css.merged.dir}" />
    	</copy>
        <for param="file">
            <path>
                <fileset dir="${build.target.css.minified.dir}" includes="**/*.css"/>
            </path>
            <sequential>
                <echo message="Minify @{file}"/>
                <java classname="com.yahoo.platform.yui.compressor.YUICompressor" classpath="${build.lib.yuicompressor}" failonerror="true">
                    <arg value="--type"/>
                    <arg value="css"/>
                    <arg value="--charset"/>
                    <arg value="utf-8"/>
                    <arg value="--line-break"/>
                    <arg value="1000"/>
                    <arg file="@{file}"/>
                    <arg value="-o"/>
                    <arg file="@{file}"/>
                </java>
            </sequential>
        </for>
    </target>
    <!-- versioning tasks ================================================= -->
    <target name="get_version">
        <exec executable="git" outputproperty="editor.version" failonerror="true">
            <arg value="describe"/>
            <arg value="--tags"/>
        </exec>
        <echo message="Editor Version: ${editor.version}"/>
    </target>
    <!-- documentation tasks ================================================= -->
    <target name="doc" depends="prepare_doc">
        <for param="file">
            <path>
                <fileset dir="${src.doc.api.dir}" includes="*.markdown" excludes="_*"/>
            </path>
            <sequential>
                <var name="apiname" unset="true"/>
                <basename property="apiname" file="@{file}" suffix=".markdown"/>
                <echo message="generate document '${apiname}.html'"/>
                <exec executable="${build.cmd.node}">
                    <arg value="${build.lib.doctool}"/>
                    <arg value="${src.doc.api.template}"/>
                    <arg value="@{file}"/>
                    <arg value="${build.dist.doc.dir}/${apiname}.html"/>
                </exec>
            </sequential>
        </for>
    </target>
    <target name="prepare_doc">
        <mkdir dir="${build.dist.doc.dir}"/>
        <copy todir="${build.dist.doc.dir}/assets" overwrite="true">
            <fileset dir="${src.doc.assets.dir}"/>
        </copy>
    </target>
    <!-- TODO : upload documents and samples automatically -->
</project>
